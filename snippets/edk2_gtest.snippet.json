{
   "Host Google Unit Test CPP File Template": {
    "prefix": "uefi-cpp-host-unit-test",
    "body": [
      "/** @file    $TM_FILENAME",
      "",
      "**/",
      "",
      "#include <Library/GoogleTestLib.h>",
      "",
      "extern \"C\" {",
      " #include <Uefi.h>",
      " #include <Library/BaseLib.h>",
      " #include <Library/DebugLib.h>",
      "}",
      "",
      "using namespace testing;",
      "",
      "/**",
      "  Sample unit test that verifies the expected result of an unsigned integer",
      "  addition operation.",
      "**/",
      "TEST (SimpleMathTests, OnePlusOneShouldEqualTwo) {",
      "  UINTN  A;",
      "  UINTN  B;",
      "  UINTN  C;",
      "",
      "  A = 1;",
      "  B = 1;",
      "  C = A + B;",
      "",
      "  ASSERT_EQ (C, (UINTN)2);",
       "}",
      "",
      "/**",
      "  Sample unit test that verifies a global BOOLEAN is updatable",
      "**/",
      "class GlobalBooleanVarTests : public Test {",
      " public:",
      "   BOOLEAN SampleGLobalTestBoolean = FALSE;",
      "};",
      "",
      "TEST_F (GlobalBooleanVarTests, GlobalBooleanShouldBeChangeable) {",
      "  SamploeGlobalTestBoolean = TRUE;",
      "  ASSERT_TRUE (SampleGLobalTestBoolean);",
      "",
      "  SamploeGlobalTestBoolean = FALSE;",
      "  ASSERT_FALSE (SampleGLobalTestBoolean);",
       "}",
      "",
      "int",
      "main (",
      "  int   argc,",
      "  char  *argv[]",
      ")",
      "{",
      "  InitGoogleTest (&argc, argv);",
      "  return RUN_ALL_TESTS ();",
      "}",
     
      "",
      "/**",
      "",
      "  Reference of most commonly used assertions",
      "  Find all at: https://google.github.io/googletest/reference/assertions.html",
      "",
      "  ----------------------------------------------------------------------------",
      "  This macro uses the framework assertion logic to check an expression for",
      "  \"TRUE\". If the expression evaluates to TRUE, execution continues.",
      "  Otherwise, the test case immediately returns UNIT_TEST_ERROR_TEST_FAILED.",
      "",
      "  @param[in]  Expression  Expression to be evaluated for TRUE.",
      "",
      "  ASSERT_TRUE(Expression)",
      "  ----------------------------------------------------------------------------",
      "  This macro uses the framework assertion logic to check an expression for",
      "  \"FALSE\". If the expression evaluates to FALSE, execution continues.",
      "  Otherwise, the test case immediately returns UNIT_TEST_ERROR_TEST_FAILED.",
      "",
      "  @param[in]  Expression  Expression to be evaluated for FALSE.",
      "",
      "  ASSERT_FALSE(Expression)",
      "  ----------------------------------------------------------------------------",
      "  This macro uses the framework assertion logic to check whether two simple",
      "  values are equal.  If the values are equal, execution continues.",
      "  Otherwise, the test case immediately returns UNIT_TEST_ERROR_TEST_FAILED.",
      "",
      "  @param[in]  ValueA  Value to be compared for equality (64-bit comparison).",
      "  @param[in]  ValueB  Value to be compared for equality (64-bit comparison).",
      "",
      "  ASSERT_EQ(ValueA, ValueB)",
      "  ----------------------------------------------------------------------------",
      "  This macro uses the framework assertion logic to check whether two simple",
      "  values are NOT equal.  If the values are NOT equal, execution continues.",
      "  Otherwise, the test case immediately returns UNIT_TEST_ERROR_TEST_FAILED.",
      "",
      "  @param[in]  ValueA  Value to be compared for equality (64-bit comparison).",
      "  @param[in]  ValueB  Value to be compared for equality (64-bit comparison).",
      "",
      "  ASSERT_NE(ValueA, ValueB)",
      "  ----------------------------------------------------------------------------",
      "  This macro uses the framework assertion logic to check whether two memory",
      "  buffers are equal.  If the buffers are equal, execution continues.",
      "  Otherwise, the test case immediately returns UNIT_TEST_ERROR_TEST_FAILED.",
      "  When checking if a pointer is not null, use EXPECT_NE(ptr, nullptr)",
      "  NOT EXPECT_NE(ptr, NULL)",
      "",
      "  @param[in]  BufferA  const char * for comparison.",
      "  @param[in]  BufferB  const char * for comparison.",
      "",
      "  ASSERT_STREQ(BufferA, BufferB)",  
      "**/",
      ""
    ],
    "description": "Google unit test CPP file template"
  },

  "Host Gmock Header File Template": {
    "prefix": "uefi-gmock-header-file",
    "body": [
      "/** @file    $TM_FILENAME",
      "",
      "**/",
      "",
      "#ifndef MOCK_<LIB_NAME>_LIB_H_",
      "#define MOCK_<LIB_NAME>_LIB_H_",
      "",
      "#include <Library/GoogleTestLib.h>",
      "#include <Library/FunctionMockLib.h>",
      "extern \"C\" {",
      "  #include <Uefi.h>",
      "}",
      "struct $TM_FILENAME_BASE {",
      "  MOCK_INTERFACE_DECLARATION ($TM_FILENAME_BASE);",
      "  // MOCK_FUNCTION_DECLARATION ();",
      "};",
      "",
      "#endif"
    ],
    "description": "Gmock header file template"
  },

  "Host Gmock CPP File Template": {
    "prefix": "uefi-gmock-cpp-file",
    "body": [
      "/** @file    $TM_FILENAME",
      "",
      "**/",
      "",
      "#include <GoogleTest/Library/$TM_FILENAME_BASE.h>",
      "",
      "MOCK_INTERFACE_DEFINITION($TM_FILENAME_BASE);",
      "// MOCK_FUNCTION_DEFINITION($TM_FILENAME_BASE, <function_name>, <num_args>, EFIAPI);",
      ""
    ],
    "description": "Gmock CPP file template"
  }
}