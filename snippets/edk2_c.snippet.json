{
  "error_snippet": {
    "prefix": ["EFI_ERROR", "error"],
    "body": ["EFI_ERROR (${0:Status})"],
    "description": "EFI error snippet"
  },
  "none_error_snippet": {
    "prefix": ["!EFI_ERROR", "!error"],
    "body": ["!EFI_ERROR (${0:Status})"],
    "description": "EFI none error snippet"
  },
  "assert_snippet": {
    "prefix": ["ASSERT", "assert"],
    "body": ["ASSERT_EFI_ERROR (${0:Status});"],
    "description": "EFI assert snippet"
  },
  "H File Template": {
    "prefix": "uefi-hfile",
    "body": [
      "/** @file    $TM_FILENAME",
      "",
      "**/",
      "",
      "#ifndef ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H_",
      "#define ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H_",
      "",
      "",
      "/* Includes */",
      "",
      "/* Simple defines */",
      "",
      "/* Type definitions */",
      "",
      "/* Function prototype declarations */",
      "",
      "/**",
      "  @brief",
      "",
      "  @param Var1",
      "  @param Pointer",
      "  @param Value",
      "  @retval EFI_STATUS",
      "**/",
      "EFI_STATUS",
      "EFIAPI",
      "function (",
      "  IN     UINT8  Var1,",
      "  IN OUT UINT8  *Pointer,",
      "  OUT    UINT8  *Value",
      "  );",
      "",
      "/* Protocol declarations */",
      "",
      "",
      "",
      "#endif // ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H_",
      "",
      ""
    ],
    "description": "h file template"
  },
  "C File Template": {
    "prefix": "uefi-cfile",
    "body": [
      "/** @file    $TM_FILENAME",
      "",
      "**/",
      "",
      "/* Includes */",
      "",
      "/* External, global and module variables */",
      "",
      "/* Function Definitions */",
      "",
      "/**",
      "  @brief",
      "",
      "  @param Var1",
      "  @param Pointer",
      "  @param Value",
      "  @retval EFI_STATUS",
      "**/",
      "EFI_STATUS",
      "EFIAPI",
      "function (",
      "  IN     UINT8  Var1,",
      "  IN OUT UINT8  *Pointer,",
      "  OUT    UINT8  *Value",
      "  )",
      "{",
      "  EFI_STATUS  Status;",
      "  UINT8       AnotherVar;",
      "",
      "  //",
      "  // Initialize local variables",
      "  //",
      "  Status     = EFI_UNSUPPORTED;",
      "  AnotherVar = 0;",
      "",
      "  return Status;",
      "}",
      ""
    ],
    "description": "c file template"
  },
  "Inf Library Template": {
    "prefix": "uefi-inf-lib",
    "body": [
      "## @file    $TM_FILENAME",
      "#",
      "#  Description",
      "#",
      "##",
      "",
      "[Defines]",
      "  INF_VERSION                    = 0x0001001B",
      "  BASE_NAME                      = $TM_FILENAME_BASE",
      "  FILE_GUID                      = ",
      "  MODULE_TYPE                    = ",
      "  VERSION_STRING                 = 1.0",
      "  LIBRARY_CLASS                  = ",
      "  CONSTRUCTOR                    = ${TM_FILENAME_BASE}Constructor",
      "",
      "[Sources]",
      "",
      "[Packages]",
      "",
      "[Protocols]",
      "",
      "[Guids]",
      "",
      "[Pcd]",
      "",
      "[Ppis]",
      "",
      "[Depex]",
      ""
    ],
    "description": "inf lib file template"
  },
  "Inf Driver Template": {
    "prefix": "uefi-inf-drv",
    "body": [
      "## @file    $TM_FILENAME",
      "#",
      "#  Description",
      "#",
      "##",
      "",
      "[Defines]",
      "  INF_VERSION                    = 0x0001001B",
      "  BASE_NAME                      = $TM_FILENAME_BASE",
      "  FILE_GUID                      = ",
      "  MODULE_TYPE                    = ",
      "  VERSION_STRING                 = 1.0",
      "  ENTRY_POINT                    = ${TM_FILENAME_BASE}Init",
      "",
      "[Sources]",
      "",
      "[Packages]",
      "",
      "[Protocols]",
      "",
      "[Guids]",
      "",
      "[Pcd]",
      "",
      "[Ppis]",
      "",
      "[Depex]",
      ""
    ],
    "description": "inf drv file template"
  },
  "Inf Unit Test Template": {
    "prefix": "uefi-inf-unit-test",
    "body": [
      "## @file    $TM_FILENAME",
      "#",
      "#  Description",
      "#",
      "##",
      "",
      "[Defines]",
      "INF_VERSION    = 0x00010005",
      "BASE_NAME      = $TM_FILENAME_BASE",
      "FILE_GUID      = <add guid>",
      "MODULE_TYPE    = HOST_APPLICATION",
      "VERSION_STRING = 1.0",
      "",
      "#",
      "# The following information is for reference only and not required by the build tools.",
      "#",
      "#  VALID_ARCHITECTURES           = IA32 X64",
      "#",
      "",
      "[Sources]",
      "  # Add your test files here",
      "",
      "[Packages]",
      "  MdePkg/MdePkg.dec",
      "  UnitTestFrameworkPkg/UnitTestFrameworkPkg.dec",
      "",
      "[LibraryClasses]",
      "  BaseLib",
      "  DebugLib",
      "  UnitTestLib",
      "",
      "[Pcd]",
      ""
    ],
    "description": "inf unit test file template"
   },
   "Dsc Host Unit Test Template": {
    "prefix": "uefi-dsc-host-unit-test",
    "body": [
      "## @file    $TM_FILENAME",
      "#",
      "#  Description",
      "#",
      "##",
      "",
      "[Defines]",
      "PLATFORM_NAME           = ${TM_FILENAME_BASE}HostTest",
      "PLATFORM_GUID           = <add guid>",
      "PLATFORM_VERSION        = 0.1",
      "DSC_SPECIFICATION       = 0x00010005",
      "OUTPUT_DIRECTORY        = Build/< replicate package path>",
      "SUPPORTED_ARCHITECTURES = IA32|X64",
      "BUILD_TARGETS           = NOOPT",
      "SKUID_IDENTIFIER        = DEFAULT",
      "",
      "!include UnitTestFrameworkPkg/UnitTestFrameworkPkgHost.dsc.inc",
      "",
      "",
      "[Components]",
      "#",
      "# Build SetupDataPkg HOST_APPLICATION Tests",
      "#",
      "< add test inf files here>",

      "",
      "#",
      "# Build HOST_APPLICATION Libraries",
      "#",
      "<add test library inf files here, e.g. mock inf files from this package>",
      ""
    ],
    "description": "dsc unit test file template"
   },
  "Uefi Enum": {
    "prefix": "uefi-enum",
    "body": [
    "typedef enum {",
    "  EnumMemberOne,  ///< Automatically initialized to zero.",
    "  EnumMemberTwo,  ///< This has the value 1",
    "  EnumMemberMax   ///< The value 2 here indicates there are two elements.",
    "} ENUMERATED_TYPE;",
    ""
    ],
    "description": "c file template"
  },
  "Uefi const": {
    "prefix": "uefi-const",
    "body": [
    "CONST UINTN  *PointerToConst;",
    "",
    "UINTN *CONST  ConstPointer;",
    "",
    "CONST UINTN *CONST  ConstPointerToConst;",
    ""
    ],
    "description": "c file template"
  }
}